* add retransmission
  + add liback messages
  + queue a liback when oldest_non_acked is too old
  + cancel a liback if sending a message before
  + add non-acked request in a per partner request queue sorted by seqnum
  + handle nacks correctly using seqnums and partner's pending queues
  + make sure acks are correctly flushed when closing endpoints
* add FORGOTTEN state for omx_forget, ...

* rework event structures to copy less in notify functions in the driver

* cannot use del_timer_sync in BH
  + make sure the timer ends after pull and delete the handle in the timer?
  + move to a queue when done and call del_timer_sync from a thread?

* cleanup BH locking in pull ?

* missing features (for PVFS2)
  + thread safety (including omx_wakeup)
  + omx_disconnect
  + omx_set_request_timeout
  + omx_set_error_handler - if the default is return, I do not need this 

* omx_local_install and update INSTALL
* /etc/init.d/open-mx script with IFACES variable in /etc/open-mx.conf
* sethostname ioctl
* ioctls to change board indexes?

* check pingpong contents

* vectorial support, through isendv/irecvv

* truc messages
* retransmission

* fix oops when removing the module while some pull handle are busy

* requeue pull (and the second one?) in the timer callback
* add nack_mcp for OMX_NACK_TYPE_BAD_RDMAWIN

* hide region id in lib_cookies since region might be used for something else?
* handle pull status/length
* keep a current (segment+offset+remaining) in user_region and recompute only when unordered
* export rdma_get and rdma window management functions
* rdma_put
* user region seqnum
* write parameter in ioctl to register a region, check it when reading/writing from/to the region
* what if too many small segments are in the same pull frame? (skb frags limit) copy in a linear skb or assume 
  the other side knows how to deal with smaller pull frames ?

* abort after too many pull retransmist retry? how to handle set_request_timeout?
* or add an ioctl to drop a pull from the lib after timeout?

* move recv lib in the kernel
  + limit unexpq size to avoid memory starvation
    - or allocate default unexp buffers upto 32kB
  + need to keep partner's recv_seqnum in the kernel
    - and synchronize with user-space which takes care of acking
    - share mapping of peer-index based array of recv seqnums between kernel and user-space?

* sleep on various event type to not wake up everybody
* thread safety
* omx_wakeup
* progress thread sleeps on a special queue
  - some event wakeup both queues (force_wakeup)
  - other events wakeup the progress thread only if no one on the regular queue

* MX_VERBOSE level in the lib, only for --enable--debug

* add warning about mtu in nic/switches when truncated packet arrives, with printk_rate

* mapper (open-mxd)
* /dev/open-mxd ?

* optimizations
  - single ioctl for multiple medium frags ?
  - no need to pad event to 64 ? no need to put the type at the end, but write it after the rest
  - optimize shared comms between boards from within the driver
    + reject sends if no place in the target eventq so that we requeue them
      instead of dropping them and needing to ack them later ?

* use IOAT
  + post a req
    cookie = dma_async_memcpy_pg_to_pg(chan, dst_page, dest_off, src_page, src_off, len)
  + send a batch of req
    dma_async_memcpy_issue_pending(chan)
  + poll completion of one cookie foo:
    dma_async_memcpy_complete(chan, cookie, NULL, NULL) == DMA_SUCCESS
  + poll completion up to last_cookie (see tcp_recvmsg() in net/ipv4/tcp.c)
    while dma_async_memcpy_complete(chan, last_cookie, &done, &used) == DMA_IN_PROGRESS
      while dma_async_is_complete(next_cookie, done, used) == DMA_SUCCESS
        free next_cookie's skb
    free all skb up to last_cookie
  + get/release a chan
    chan = get_softnet_dma()
    ...
    dma_chan_put(chan)
  + manage client/chan (see netdev_dma_event() net/core/dev.c)
    struct dma_client client.event_callback
    dma_async_client_register(client)
    dma_async_client_chan_request(client)

* use valgrind memory hooks
* add valgrind ioctl hooks

* add a VERSION file and a script to update MODULE_VERSION, COPYING and file headers ?

* non MXoE compatible extensions:
  + rdma in both direction with optional notification containing the target window id ?
  + no notify message, report event on rdma get completion ?
  + multiple segments in large messages, with random page offset (support in the driver, not used by the lib)
  + extend threshold for small/tiny ?
  + cleanup connect request/reply data
  + no bidirectionnal connect in the background
